# O que eu preciso para começar a contribuir? Git? GitFlow?

Não quero neste livro definir o que você vai usar como ferramenta, melhor meio para contribuir em projetos abertos ou até mesmo recomendar o que é melhor usar ou não. Porém esse livro é baseado nas opções mais populares. Focando no uso de Git como ferramenta de versionamento do código e o GitHub com Web Hosting para social coding usando o Git.

Este livro irá apresentar tais ferramentas, porém iremos nos ater apenas a apresentação. Não iremos adentrar conceitos, logo recomendo bastante dar uma boa estudada em Git, seguindo a documentação oficial (disponível no link: http://git-scm.com) e criar uma conta no GitHub (disponível no link: http://github.com) e ir fazendo o uso constantemente para se acostumar com o uso destes recursos.

Existem várias ferramentas para versionamento, assim como existem várias ferramentas de Web Hosting para projetos. Entretanto vamos nos ater ao uso das mencionadas acima.

# Git

## Versionando seu código com Git

### Sobre Controle de Versão
O que é controle de versão, e por que você deve se importar? O controle de versão é um sistema que registra as mudanças feitas em um arquivo ou um conjunto de arquivos ao longo do tempo de forma que você possa recuperar versões específicas. 

Se você é um designer gráfico ou um web designer e quer manter todas as versões de uma imagem ou layout (o que você certamente gostaria), usar um Sistema de Controle de Versão (Version Control System ou VCS) é uma decisão sábia. Ele permite reverter arquivos para um estado anterior, reverter um projeto inteiro para um estado anterior, comparar mudanças feitas ao decorrer do tempo, ver quem foi o último a modificar algo que pode estar causando problemas, quem introduziu um bug e quando, e muito mais. Usar um VCS normalmente significa que se você estragou algo ou perdeu arquivos, poderá facilmente reavê-los. Além disso, você pode controlar tudo sem maiores esforços.

## Uma pincelada na história do Git

O kernel (núcleo) do Linux é um projeto de software de código aberto de escopo razoavelmente grande. Durante a maior parte do período de manutenção do kernel do Linux (1991-2002), as mudanças no software eram repassadas como patches e arquivos compactados. Em 2002, o projeto do kernel do Linux começou a usar um sistema DVCS proprietário chamado BitKeeper.

Em 2005, o relacionamento entre a comunidade que desenvolvia o kernel e a empresa que desenvolvia comercialmente o BitKeeper se desfez, e o status de isento-de-pagamento da ferramenta foi revogado. Isso levou a comunidade de desenvolvedores do Linux (em particular Linus Torvalds, o criador do Linux) a desenvolver sua própria ferramenta baseada nas lições que eles aprenderam ao usar o BitKeeper. Alguns dos objetivos do novo sistema eram:

- Velocidade
- Design simples
- Suporte robusto a desenvolvimento não linear (milhares de branches paralelos)
- Totalmente distribuído
- Capaz de lidar eficientemente com grandes projetos como o kernel do Linux (velocidade e volume de dados)

Desde sua concepção em 2005, o Git evoluiu e amadureceu a ponto de ser um sistema fácil de usar e ainda assim mantém essas qualidades iniciais. É incrivelmente rápido, bastante eficiente com grandes projetos e possui um sistema impressionante de branching para desenvolvimento não-linear.

# GitHub

GitHub é um Serviço de Web Hosting Compartilhado para projetos que usam o controle de versionamento Git. É escrito em Ruby on Rails. O GitHub possui planos comerciais e gratuitos para projetos de código aberto.

Este site possui funcionalidades de uma rede social como feeds, followers, wiki e um gráfico que mostra como os desenvolvedores trabalham as versões de seus repositórios.

Usado desde então para que desenvolvedores possam hospedar seus projetos. Além de permitir também conversar com outros desenvolvedores, fazer comentários nos projetos e ainda solicitar modificações no código alheio. Funcionando como uma espécie de "social coding". O projeto pode ser acessado de qualquer local.